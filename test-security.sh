#!/bin/bash

# Script de test de s√©curit√© pour l'Audit SEO Tool
# Utilisez ce script pour v√©rifier que toutes les mesures de s√©curit√© fonctionnent

echo "üîí TEST DE S√âCURIT√â - Audit SEO Tool"
echo "===================================="

# Configuration
BASE_URL="http://localhost:3000"
if [ ! -z "$1" ]; then
    BASE_URL="$1"
fi

echo "üåê Test sur : $BASE_URL"
echo ""

# Test 1: Headers de s√©curit√©
echo "üìã Test 1: V√©rification des headers de s√©curit√©"
echo "----------------------------------------------"
response=$(curl -s -I "$BASE_URL")
echo "$response" | grep -E "(Content-Security-Policy|X-Frame-Options|X-Content-Type-Options|Referrer-Policy)"
echo ""

# Test 2: Protection CSRF
echo "üõ°Ô∏è  Test 2: Protection CSRF (devrait √©chouer sans header)"
echo "--------------------------------------------------------"
curl -s -X POST "$BASE_URL/api/audit" \
  -H "Content-Type: application/json" \
  -d '{"domain": "example.com", "timestamp": '$(date +%s000)'}' | jq .
echo ""

# Test 3: Validation domaine malveillant
echo "‚ö†Ô∏è  Test 3: Tentative d'injection domaine (devrait √©chouer)"
echo "----------------------------------------------------------"
curl -s -X POST "$BASE_URL/api/audit" \
  -H "Content-Type: application/json" \
  -H "X-Requested-With: XMLHttpRequest" \
  -d '{"domain": "javascript:alert(1)", "timestamp": '$(date +%s000)'}' | jq .
echo ""

# Test 4: Validation timestamp
echo "‚è∞ Test 4: Timestamp expir√© (devrait √©chouer)"
echo "--------------------------------------------"
old_timestamp=$(($(date +%s) - 600))000  # 10 minutes ago
curl -s -X POST "$BASE_URL/api/audit" \
  -H "Content-Type: application/json" \
  -H "X-Requested-With: XMLHttpRequest" \
  -d '{"domain": "example.com", "timestamp": '$old_timestamp'}' | jq .
echo ""

# Test 5: Rate limiting
echo "üö¶ Test 5: Rate limiting (5+ requ√™tes rapides)"
echo "----------------------------------------------"
for i in {1..7}; do
    echo -n "Requ√™te $i: "
    curl -s -X POST "$BASE_URL/api/audit" \
      -H "Content-Type: application/json" \
      -H "X-Requested-With: XMLHttpRequest" \
      -d '{"domain": "example.com", "timestamp": '$(date +%s000)'}' | jq -r '.error // "OK"'
    sleep 0.5
done
echo ""

# Test 6: Email avec caract√®res dangereux
echo "üìß Test 6: Email avec injection (devrait √©chouer)"
echo "------------------------------------------------"
curl -s -X POST "$BASE_URL/api/send-audit" \
  -H "Content-Type: application/json" \
  -H "X-Requested-With: XMLHttpRequest" \
  -d '{"domain": "example.com", "email": "test<script>alert(1)</script>@evil.com", "timestamp": '$(date +%s000)'}' | jq .
echo ""

# Test 7: Domaine local bloqu√©
echo "üè† Test 7: Domaine local (devrait √©chouer)"
echo "-----------------------------------------"
curl -s -X POST "$BASE_URL/api/audit" \
  -H "Content-Type: application/json" \
  -H "X-Requested-With: XMLHttpRequest" \
  -d '{"domain": "localhost:3000", "timestamp": '$(date +%s000)'}' | jq .
echo ""

# Test 8: Mode invalide
echo "‚ùå Test 8: Mode d'audit invalide (devrait √©chouer)"
echo "-------------------------------------------------"
curl -s -X POST "$BASE_URL/api/audit" \
  -H "Content-Type: application/json" \
  -H "X-Requested-With: XMLHttpRequest" \
  -d '{"domain": "example.com", "mode": "malicious", "timestamp": '$(date +%s000)'}' | jq .
echo ""

# Test 9: Requ√™te l√©gitime
echo "‚úÖ Test 9: Requ√™te l√©gitime (devrait r√©ussir)"
echo "--------------------------------------------"
curl -s -X POST "$BASE_URL/api/audit" \
  -H "Content-Type: application/json" \
  -H "X-Requested-With: XMLHttpRequest" \
  -d '{"domain": "example.com", "mode": "fast", "timestamp": '$(date +%s000)'}' | jq -r '.success // .error'
echo ""

echo "üîç V√©rification des logs de s√©curit√©:"
echo "------------------------------------"
if [ -f "logs/security.log" ]; then
    echo "Derni√®res entr√©es du log de s√©curit√©:"
    tail -5 logs/security.log | jq .
else
    echo "‚ö†Ô∏è  Fichier de log non trouv√© (logs/security.log)"
fi

echo ""
echo "‚úÖ Tests de s√©curit√© termin√©s !"
echo "V√©rifiez que les tests 'devrait √©chouer' ont bien √©chou√©."
